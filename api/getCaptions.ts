import type { VercelRequest, VercelResponse } from '@vercel/node';

interface CaptionSegment {
  text: string;
  start: number;
  duration: number;
}

// 格式化字幕文本
function formatCaptions(segments: CaptionSegment[], withTimestamp: boolean): string {
  if (!segments || segments.length === 0) {
    return "無可用字幕內容";
  }

  return segments.map(segment => {
    const text = segment.text.trim();
    
    if (withTimestamp) {
      const minutes = Math.floor(segment.start / 60);
      const seconds = Math.floor(segment.start % 60);
      const timestamp = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      return `[${timestamp}] ${text}`;
    }
    return text;
  }).join('\n');
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  const { videoId, lang, format } = req.query;

  if (!videoId || typeof videoId !== 'string') {
    return res.status(400).json({ error: 'Video ID is required' });
  }

  // Use server environment variable only
  const apiKey = process.env.RAPIDAPI_KEY;

  if (!apiKey) {
    return res.status(500).json({ 
      error: 'API key not configured. Please set RAPIDAPI_KEY environment variable.' 
    });
  }

  // 如果請求格式化字幕和指定語言，獲取該語言的字幕文本
  // 使用舊 API（因為 YouTube V31 不支持下載字幕內容）
  if (format === 'text' && lang) {
    const url = `https://youtube-captions-transcript-subtitles-video-combiner.p.rapidapi.com/get-video-info/${videoId}?format=json&lang=${lang}`;
    const options = {
      method: 'GET',
      headers: {
        'x-rapidapi-key': apiKey,
        'x-rapidapi-host': 'youtube-captions-transcript-subtitles-video-combiner.p.rapidapi.com'
      }
    };

    try {
      const response = await fetch(url, options);
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
        return res.status(response.status).json({ 
          error: 'Failed to fetch captions from API', 
          details: errorData 
        });
      }

      const data = await response.json();
      const withTimestamp = req.query.timestamp === 'true';
      
      // 提取字幕片段
      const segments = data.captions || data.segments || [];
      const formattedText = formatCaptions(segments, withTimestamp);
      
      return res.status(200).send(formattedText);
    } catch (error) {
      console.error('Caption fetch error:', error);
      return res.status(500).json({ error: 'An internal server error occurred', details: (error as Error).message });
    }
  }

  // 獲取可用的字幕軌列表
  // 使用 YouTube V31 API（節省舊 API 的調用次數）
  const url = `https://youtube-v31.p.rapidapi.com/captions?part=snippet&videoId=${videoId}`;
  const options = {
    method: 'GET',
    headers: {
      'x-rapidapi-key': apiKey,
      'x-rapidapi-host': 'youtube-v31.p.rapidapi.com'
    }
  };

  try {
    const response = await fetch(url, options);
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
      return res.status(response.status).json({ 
        error: 'Failed to fetch caption list from YouTube V31 API', 
        details: errorData 
      });
    }

    const data = await response.json();
    
    // YouTube V31 API 回應格式
    const captionItems = data.items || [];
    const formattedTracks = captionItems.map((item: any) => {
      const snippet = item.snippet || {};
      return {
        lang: snippet.name 
          ? `${getLanguageName(snippet.language)} (${snippet.name})` 
          : getLanguageName(snippet.language),
        code: snippet.language || '',
        url: '', // YouTube V31 API 不提供下載 URL
        isAutoGenerated: snippet.trackKind === 'asr' || snippet.isAutoSynced || false,
        isCC: snippet.isCC || false
      };
    });

    res.status(200).json({ 
      captions: formattedTracks
    });

  } catch (error) {
    console.error('Caption list error:', error);
    res.status(500).json({ error: 'An internal server error occurred', details: (error as Error).message });
  }
}

// 語言代碼轉換為中文名稱
function getLanguageName(code: string): string {
  const languageMap: { [key: string]: string } = {
    'en': '英文',
    'zh-TW': '繁體中文',
    'zh-CN': '簡體中文',
    'zh-Hans': '簡體中文',
    'zh-Hant': '繁體中文',
    'ja': '日文',
    'ko': '韓文',
    'es': '西班牙文',
    'fr': '法文',
    'de': '德文',
    'it': '義大利文',
    'pt': '葡萄牙文',
    'ru': '俄文',
    'ar': '阿拉伯文',
    'hi': '印度文',
    'th': '泰文',
    'vi': '越南文',
    'id': '印尼文',
    'ms': '馬來文',
    'fil': '菲律賓文',
  };
  return languageMap[code] || code.toUpperCase();
}
